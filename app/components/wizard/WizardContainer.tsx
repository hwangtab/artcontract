'use client';

import React, { useState, useEffect } from 'react';
import { useWizard } from '@/hooks/useWizard';
import { useAIAssistant } from '@/hooks/useAIAssistant';
import Button from '../shared/Button';
import Step00ArtistInfo from './steps/Step00ArtistInfo';
import Step01FieldSelection from './steps/Step01FieldSelection';
import Step02WorkDetail from './steps/Step02WorkDetail';
import Step03ClientType from './steps/Step03ClientType';
import Step04Timeline from './steps/Step04Timeline';
import Step05Payment from './steps/Step05Payment';
import Step06Revisions from './steps/Step06Revisions';
import Step06bCopyright from './steps/Step06bCopyright';
import Step07UsageScope from './steps/Step07UsageScope';
import Step08Protection from './steps/Step08Protection';
import Step08FinalCheck from './steps/Step08FinalCheck';
import ContractResult from '../contract/ContractResult';
import AssistantButton from '../ai-assistant/AssistantButton';
import AssistantWindow from '../ai-assistant/AssistantWindow';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { generateContract } from '@/lib/contract/generator';
import { GeneratedContract, ContractTemplate } from '@/types/contract';

export default function WizardContainer() {
  const {
    currentStep,
    formData,
    completeness,
    canGoNext,
    canGoPrev,
    totalSteps,
    nextStep,
    prevStep,
    goToStep,
    updateFormData,
  } = useWizard();

  const {
    isOpen,
    messages,
    isLoading,
    toggleAssistant,
    sendMessage,
    addProactiveMessage,
  } = useAIAssistant();

  const [generatedContract, setGeneratedContract] = useState<GeneratedContract | null>(null);
  const [shownWarnings, setShownWarnings] = useState<Set<string>>(new Set());
  const [shownStepTips, setShownStepTips] = useState<Set<number>>(new Set());

  // ÌîÑÎ°úÏï°Ìã∞Î∏å Î©îÏãúÏßÄ: Í∞Å Îã®Í≥Ñ ÏßÑÏûÖ Ïãú ÌåÅ Ï†úÍ≥µ (Ï§ëÎ≥µ Î∞©ÏßÄ)
  useEffect(() => {
    const stepTips: { [key: number]: string } = {
      0: 'üë§ ÏïàÎÖïÌïòÏÑ∏Ïöî! Î®ºÏ†Ä ÏûëÍ∞ÄÎãòÏùò Ï†ïÎ≥¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî. Í≥ÑÏïΩÏÑúÏùò "ÏùÑ"Ïù¥ Îê©ÎãàÎã§.',
      1: 'üí° ÏûëÏóÖ Î∂ÑÏïºÎ•º ÏÑ†ÌÉùÌïòÏãúÎ©¥ ÎßûÏ∂§Ìòï Í≥ÑÏïΩÏÑú ÌÖúÌîåÎ¶øÏùÑ Ï†úÍ≥µÌï¥ÎìúÎ†§Ïöî!',
      2: 'üé® ÏûëÏóÖ ÎÇ¥Ïö©ÏùÑ ÏûêÏÑ∏Ìûà ÏÑ§Î™ÖÌï†ÏàòÎ°ù AIÍ∞Ä Ï†ïÌôïÌïú Í∏àÏï°Í≥º Ï°∞Í±¥ÏùÑ Ï∂îÏ≤úÌï† Ïàò ÏûàÏñ¥Ïöî.',
      3: 'üë• ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Í∞úÏù∏Ïù∏ÏßÄ, ÏÜåÏÉÅÍ≥µÏù∏Ïù∏ÏßÄ, Í∏∞ÏóÖÏù∏ÏßÄÏóê Îî∞Îùº Í≥ÑÏïΩ Ï°∞Í±¥Ïù¥ Îã¨ÎùºÏ†∏Ïöî.',
      4: 'üìÖ ÎßàÍ∞êÏùºÏù¥ ÎÑàÎ¨¥ Ï¥âÎ∞ïÌïòÎ©¥ Îü¨Ïãú Ï∂îÍ∞Ä ÏöîÍ∏àÏùÑ Î∞õÎäî Í≤ÉÏùÑ Ï∂îÏ≤úÎìúÎ†§Ïöî!',
      5: 'üí∞ Í∏àÏï°Ïù¥ 100ÎßåÏõê Ïù¥ÏÉÅÏù¥Î©¥ Î≥ÄÌò∏ÏÇ¨ Í≤ÄÌÜ†Î•º Ï∂îÏ≤úÌï¥Ïöî. Í≥ÑÏïΩÍ∏àÏùÄ 30-50%Í∞Ä Ï†ÅÎãπÌï¥Ïöî.',
      6: 'üîÑ Î¨¥Ï†úÌïú ÏàòÏ†ïÏùÄ Ï†àÎåÄ Í∏àÎ¨º! 2-3ÌöåÍ∞Ä Ï†ÅÎãπÌïòÍ≥†, Ï∂îÍ∞Ä ÏàòÏ†ïÎπÑÎ•º Î™ÖÏãúÌïòÏÑ∏Ïöî.',
      7: '‚öñÔ∏è Ï†ÄÏûëÍ∂å Í¥ÄÎ¶¨Îäî ÏÑ†ÌÉùÏÇ¨Ìï≠Ïù¥ÏßÄÎßå, Í≥†Ïï° Í≥ÑÏïΩ(100ÎßåÏõê Ïù¥ÏÉÅ)Ïù¥Î©¥ Î∞òÎìúÏãú ÏÑ§Ï†ïÌïòÏÑ∏Ïöî! Ï†ÄÏûëÏù∏Í≤©Í∂åÏùÄ Ï†àÎåÄ ÏñëÎèÑÌï† Ïàò ÏóÜÏñ¥Ïöî.',
      8: 'üåê ÏÉÅÏóÖÏ†Å ÏÇ¨Ïö©Í∂åÏùÄ Í∞úÏù∏ ÏÇ¨Ïö©Î≥¥Îã§ 2-3Î∞∞ ÎÜíÍ≤å Ï±ÖÏ†ïÌïòÏÑ∏Ïöî. ÎèÖÏ†êÍ∂åÏùÄ 5Î∞∞ÍπåÏßÄÎèÑ Í∞ÄÎä•Ìï¥Ïöî!',
      9: 'üõ°Ô∏è Î≥¥Ìò∏ Ï°∞Ìï≠ÏùÄ ÏÑ†ÌÉùÏÇ¨Ìï≠Ïù¥ÏßÄÎßå, ÌÅ¨Î†àÎîß Î™ÖÍ∏∞ÏôÄ ÏàòÏ†ï Í∂åÎ¶¨Îäî Î∞òÎìúÏãú Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî! Ìè¨Ìä∏Ìè¥Î¶¨Ïò§ ÏÇ¨Ïö©Í≥º Ï†ÄÏûëÏù∏Í≤©Í∂å Î≥¥Ìò∏Ïóê Ï§ëÏöîÌï©ÎãàÎã§.',
      10: '‚úÖ ÏµúÏ¢Ö ÌôïÏù∏ Îã®Í≥ÑÏòàÏöî. Îπ†ÏßÑ ÎÇ¥Ïö©Ïù¥ ÏóÜÎäîÏßÄ ÍººÍººÌûà ÌôïÏù∏ÌïòÏÑ∏Ïöî!',
    };

    if (stepTips[currentStep] && !shownStepTips.has(currentStep)) {
      // ‚úÖ Ï¶âÏãú SetÏóê Ï∂îÍ∞ÄÌïòÏó¨ React Strict Mode 2Î≤à ÎßàÏö¥Ìä∏ Ïãú Ï§ëÎ≥µ Î∞©ÏßÄ
      setShownStepTips(prev => new Set(prev).add(currentStep));

      setTimeout(() => {
        addProactiveMessage(stepTips[currentStep], 'info');
      }, 1000);
    }
  }, [currentStep, addProactiveMessage, shownStepTips]);

  // ÏúÑÌóò Ï°∞Í±¥ ÏûêÎèô Í∞êÏßÄ (Ï§ëÎ≥µ Î∞©ÏßÄ)
  useEffect(() => {
    // Í∏àÏï° ÏúÑÌóò Í∞êÏßÄ
    if (formData.payment?.amount !== undefined) {
      const warningId = `payment_${formData.payment.amount}`;

      if (!shownWarnings.has(warningId)) {
        if (formData.payment.amount === 0) {
          addProactiveMessage('‚ö†Ô∏è ÏúÑÌóò! Í∏àÏï°Ïù¥ 0ÏõêÏúºÎ°ú ÏÑ§Ï†ïÎêòÏóàÏñ¥Ïöî. Î¨¥Î£åÎ°ú ÏûëÏóÖÌïòÏãúÎäî Í±¥Í∞ÄÏöî? ÏµúÏÜåÌïú ÏûëÏóÖ ÎπÑÏö©ÏùÄ Î∞õÏúºÏÖîÏïº Ìï¥Ïöî!', 'danger');
        } else if (formData.payment.amount > 0 && formData.payment.amount < 50000) {
          addProactiveMessage('üí° Í∏àÏï°Ïù¥ ÎÑàÎ¨¥ ÎÇÆÏùÄ Í≤É Í∞ôÏïÑÏöî. ÏãúÍ∞ÑÍ≥º ÎÖ∏Î†•ÏùÑ Í≥†Î†§ÌïòÎ©¥ ÏµúÏÜå 5ÎßåÏõê Ïù¥ÏÉÅ Î∞õÏúºÏãúÎäî Í±∏ Ï∂îÏ≤úÌï¥Ïöî.', 'warning');
        } else if (formData.payment.amount >= 1000000) {
          addProactiveMessage('üíº 100ÎßåÏõê Ïù¥ÏÉÅ Í≥†Ïï° Í≥ÑÏïΩÏù¥ÏóêÏöî! Î≤ïÎ•† Ï†ÑÎ¨∏Í∞ÄÏùò Í≤ÄÌÜ†Î•º Î∞õÎäî Í≤ÉÏùÑ Í∞ïÎ†•Ìûà Ï∂îÏ≤úÎìúÎ†§Ïöî.', 'warning');
        }
        setShownWarnings(prev => new Set(prev).add(warningId));
      }
    }

    // ÏàòÏ†ï ÌöüÏàò ÏúÑÌóò Í∞êÏßÄ
    if (formData.revisions !== undefined && formData.revisions !== null) {
      const revisionId = `revisions_${formData.revisions}`;

      if (!shownWarnings.has(revisionId)) {
        if (typeof formData.revisions === 'number') {
          if (formData.revisions === 0) {
            addProactiveMessage('‚ö†Ô∏è ÏàòÏ†ï 0ÌöåÎäî ÎÑàÎ¨¥ ÏúÑÌóòÌï¥Ïöî! ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Í∞Ä Í≤∞Í≥ºÎ¨ºÏóê Î∂àÎßåÏù¥ ÏûàÏñ¥ÎèÑ ÏàòÏ†ïÌï† Ïàò ÏóÜÎã§Îäî ÎúªÏù¥ÏóêÏöî. ÏµúÏÜå 1-2ÌöåÎäî Î≥¥Ïû•ÌïòÏÑ∏Ïöî.', 'danger');
          } else if (formData.revisions >= 10) {
            addProactiveMessage('‚ö†Ô∏è ÏúÑÌóò! ÏàòÏ†ï ÌöüÏàòÍ∞Ä ÎÑàÎ¨¥ ÎßéÏïÑÏöî. Î¨¥Ï†úÌïú ÏûëÏóÖÏóê Îπ†Ïßà Ïàò ÏûàÏñ¥Ïöî. 2-3ÌöåÍ∞Ä Ï†ÅÎãπÌïòÍ≥†, Ï∂îÍ∞Ä ÏàòÏ†ïÎπÑÎ•º Î™ÖÏãúÌïòÏÑ∏Ïöî!', 'danger');
          }
        } else if (formData.revisions === 'unlimited') {
          addProactiveMessage('üö® Î¨¥Ï†úÌïú ÏàòÏ†ïÏùÄ Ï†àÎåÄ Í∏àÎ¨º! ÎÅùÏóÜÎäî ÏàòÏ†ï ÏöîÏ≤≠Ïóê ÏãúÎã¨Î¶¥ Ïàò ÏûàÏñ¥Ïöî. Î∞òÎìúÏãú ÌöüÏàòÎ•º Ï†ïÌïòÏÑ∏Ïöî!', 'danger');
        }
        setShownWarnings(prev => new Set(prev).add(revisionId));
      }
    }

    // ÎßàÍ∞êÏùº ÏúÑÌóò Í∞êÏßÄ
    if (formData.timeline?.deadline) {
      const deadline = new Date(formData.timeline.deadline);
      const today = new Date();
      const daysUntilDeadline = Math.floor((deadline.getTime() - today.getTime()) / (1000 * 60 * 60 * 24));
      const deadlineId = `deadline_${daysUntilDeadline}`;

      if (!shownWarnings.has(deadlineId)) {
        if (daysUntilDeadline <= 1) {
          addProactiveMessage('üö® Í∏âÌï®! ÎßàÍ∞êÏùºÏù¥ Ïò§Îäò ÎòêÎäî ÎÇ¥ÏùºÏù¥ÏóêÏöî. Ïù¥Î†áÍ≤å Ï¥âÎ∞ïÌïú ÏùºÏ†ïÏù¥Î©¥ Îü¨Ïãú Ï∂îÍ∞Ä ÏöîÍ∏à(50-100%)ÏùÑ Î∞òÎìúÏãú Î∞õÏúºÏÑ∏Ïöî!', 'danger');
          setShownWarnings(prev => new Set(prev).add(deadlineId));
        } else if (daysUntilDeadline <= 3) {
          addProactiveMessage('‚ö†Ô∏è ÎßàÍ∞êÏùºÏù¥ 3Ïùº Ïù¥ÎÇ¥ÏòàÏöî. Ï¥âÎ∞ïÌïú ÏùºÏ†ïÏù¥Î©¥ Îü¨Ïãú ÏöîÍ∏àÏùÑ Ï≤≠Íµ¨ÌïòÎäî Í±∏ Ï∂îÏ≤úÎìúÎ†§Ïöî.', 'warning');
          setShownWarnings(prev => new Set(prev).add(deadlineId));
        }
      }
    }

    // ÏÉÅÏóÖÏ†Å ÏÇ¨Ïö© Í≤ΩÍ≥†
    if (formData.commercialUse && formData.payment?.amount) {
      const commercialId = `commercial_${formData.payment.amount}`;
      const suggestedMin = formData.aiAnalysis?.suggestedPriceRange?.min || 0;

      if (!shownWarnings.has(commercialId) && formData.payment.amount < suggestedMin * 1.5) {
        addProactiveMessage('üíº ÏÉÅÏóÖÏ†Å ÏÇ¨Ïö© Í≥ÑÏïΩÏù¥ÏóêÏöî! Í∞úÏù∏ ÏÇ¨Ïö©Î≥¥Îã§ ÏµúÏÜå 2Î∞∞ Ïù¥ÏÉÅ Î∞õÏúºÏÖîÏïº Í≥µÏ†ïÌï¥Ïöî.', 'warning');
        setShownWarnings(prev => new Set(prev).add(commercialId));
      }
    }

    // ÎèÖÏ†êÍ∂å Í≤ΩÍ≥†
    if (formData.exclusiveRights && formData.payment?.amount) {
      const exclusiveId = `exclusive_${formData.payment.amount}`;
      const suggestedMin = formData.aiAnalysis?.suggestedPriceRange?.min || 0;

      if (!shownWarnings.has(exclusiveId) && formData.payment.amount < suggestedMin * 2) {
        addProactiveMessage('üîí ÎèÖÏ†êÍ∂å Í≥ÑÏïΩÏù¥ÏóêÏöî! ÏùºÎ∞ò Í≥ÑÏïΩÎ≥¥Îã§ 3-5Î∞∞ ÎÜíÍ≤å Î∞õÏúºÏÖîÏïº Ìï¥Ïöî. Îã§Î•∏ Í≥≥ÏóêÏÑú Î™ª Ïì∞Îäî ÎßåÌÅº Î≥¥ÏÉÅÎ∞õÏúºÏÑ∏Ïöî!', 'danger');
        setShownWarnings(prev => new Set(prev).add(exclusiveId));
      }
    }
  }, [formData, addProactiveMessage, shownWarnings]);

  const handleGenerateContract = async () => {
    // ÌÖúÌîåÎ¶ø Í∞ÄÏ†∏Ïò§Í∏∞
    try {
      const response = await fetch(`/api/templates?field=${formData.field}`);
      const data = await response.json();

      if (data.success) {
        const contract = generateContract(formData, data.data.template);
        setGeneratedContract(contract);
      }
    } catch (error) {
      console.error('Contract generation failed:', error);
    }
  };

  const handleEditContract = () => {
    setGeneratedContract(null);
    goToStep(10);
  };

  const handleSendMessage = (message: string) => {
    sendMessage(message, formData, currentStep, updateFormData);
  };

  const renderStep = () => {
    switch (currentStep) {
      case 0:
        return (
          <Step00ArtistInfo
            artistName={formData.artistName}
            artistContact={formData.artistContact}
            artistIdNumber={formData.artistIdNumber}
            artistAddress={formData.artistAddress}
            onUpdate={(data) => updateFormData(data)}
          />
        );
      case 1:
        return (
          <Step01FieldSelection
            selectedField={formData.field}
            subField={formData.subField}
            onSelect={(field) => updateFormData({ field })}
            onSubFieldChange={(subField) => updateFormData({ subField })}
          />
        );
      case 2:
        return (
          <Step02WorkDetail
            field={formData.field!}
            workType={formData.workType}
            workDescription={formData.workDescription}
            aiAnalysis={formData.aiAnalysis}
            onSelect={(workType, description, analysis) =>
              updateFormData({
                workType,
                workDescription: description,
                aiAnalysis: analysis,
              })
            }
          />
        );
      case 3:
        return (
          <Step03ClientType
            clientType={formData.clientType}
            clientName={formData.clientName}
            clientContact={formData.clientContact}
            aiAnalysis={formData.aiAnalysis}
            onUpdate={(data) => updateFormData(data)}
          />
        );
      case 4:
        return (
          <Step04Timeline
            startDate={formData.timeline?.startDate}
            deadline={formData.timeline?.deadline}
            onUpdate={(startDate, deadline) =>
              updateFormData({ timeline: { startDate, deadline } })
            }
          />
        );
      case 5:
        return (
          <Step05Payment
            amount={formData.payment?.amount}
            deposit={formData.payment?.deposit}
            onUpdate={(amount, deposit) =>
              updateFormData({
                payment: { ...formData.payment!, amount, deposit },
              })
            }
            suggestedPriceRange={formData.aiAnalysis?.suggestedPriceRange}
          />
        );
      case 6:
        return (
          <Step06Revisions
            revisions={formData.revisions}
            additionalRevisionFee={formData.additionalRevisionFee}
            onUpdate={(revisions, additionalFee) =>
              updateFormData({ revisions, additionalRevisionFee: additionalFee })
            }
          />
        );
      case 7:
        return (
          <Step06bCopyright
            copyrightTerms={formData.copyrightTerms}
            onUpdate={(data) => updateFormData(data)}
          />
        );
      case 8:
        return (
          <Step07UsageScope
            usageScope={formData.usageScope}
            commercialUse={formData.commercialUse}
            exclusiveRights={formData.exclusiveRights}
            aiAnalysis={formData.aiAnalysis}
            onUpdate={(data) => updateFormData(data)}
          />
        );
      case 9:
        return (
          <Step08Protection
            protectionClauses={formData.protectionClauses}
            artistName={formData.artistName}
            field={formData.field}
            revisions={formData.revisions}
            additionalRevisionFee={formData.additionalRevisionFee}
            onUpdate={(data) => updateFormData(data)}
          />
        );
      case 10:
        return (
          <Step08FinalCheck
            formData={formData}
            onEdit={goToStep}
            onGenerate={handleGenerateContract}
          />
        );
      default:
        return (
          <div className="text-center p-12">
            <h2 className="text-2xl font-bold text-gray-900 mb-4">
              Step {currentStep}
            </h2>
            <p className="text-gray-600">ÏûòÎ™ªÎêú Îã®Í≥ÑÏûÖÎãàÎã§</p>
          </div>
        );
    }
  };

  // Í≥ÑÏïΩÏÑú ÏÉùÏÑ± ÏôÑÎ£åÎêòÎ©¥ Í≤∞Í≥º ÌôîÎ©¥ Î≥¥Ïó¨Ï£ºÍ∏∞
  if (generatedContract) {
    return <ContractResult contract={generatedContract} onEdit={handleEditContract} />;
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        {/* Progress Bar */}
        <div className="mb-8">
          <div className="flex items-center justify-between mb-2">
            <span className="text-sm font-medium text-gray-600">
              ÏßÑÌñâÎ•†: {completeness}%
            </span>
            <span className="text-sm font-medium text-gray-600">
              {currentStep} / {totalSteps}
            </span>
          </div>
          <div className="w-full h-2 bg-gray-200 rounded-full overflow-hidden">
            <div
              className="h-full bg-primary-500 transition-all duration-300"
              style={{ width: `${(currentStep / totalSteps) * 100}%` }}
            />
          </div>
        </div>

        {/* Step Content */}
        <div className="bg-white rounded-2xl shadow-sm p-8 mb-6">
          {renderStep()}
        </div>

        {/* Navigation */}
        {currentStep !== 10 && (
          <div className="flex justify-between items-center">
            <Button
              variant="secondary"
              onClick={prevStep}
              disabled={!canGoPrev}
            >
              <ChevronLeft size={20} />
              Ïù¥Ï†Ñ
            </Button>

            <div className="flex gap-2">
              {Array.from({ length: totalSteps }).map((_, idx) => (
                <div
                  key={idx}
                  className={`w-2 h-2 rounded-full transition-colors ${
                    idx + 1 === currentStep
                      ? 'bg-primary-500'
                      : idx + 1 < currentStep
                      ? 'bg-primary-300'
                      : 'bg-gray-300'
                  }`}
                />
              ))}
            </div>

            <Button onClick={nextStep} disabled={!canGoNext}>
              Îã§Ïùå
              <ChevronRight size={20} />
            </Button>
          </div>
        )}

        {/* Warnings */}
        {formData.warnings && formData.warnings.length > 0 && currentStep !== 10 && (
          <div className="mt-6 space-y-3">
            {formData.warnings.slice(0, 2).map((warning) => (
              <div
                key={warning.id}
                className={`p-4 rounded-lg border-l-4 ${
                  warning.severity === 'danger'
                    ? 'bg-danger/10 border-danger'
                    : warning.severity === 'warning'
                    ? 'bg-warning/10 border-warning'
                    : 'bg-info/10 border-info'
                }`}
              >
                <p className="font-medium text-gray-900">{warning.message}</p>
                <p className="text-sm text-gray-600 mt-1">{warning.suggestion}</p>
              </div>
            ))}
          </div>
        )}
      </div>

      {/* AI Assistant */}
      <AssistantButton isOpen={isOpen} onClick={toggleAssistant} />
      {isOpen && (
        <AssistantWindow
          messages={messages}
          isLoading={isLoading}
          currentStep={currentStep}
          onSendMessage={handleSendMessage}
        />
      )}
    </div>
  );
}
